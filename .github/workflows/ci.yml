name: CI/CD Pipeline

permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: eq_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio alembic pydantic-settings

    - name: Set environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/eq_test_db" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_ci" >> $GITHUB_ENV
        echo "ALGORITHM=HS256" >> $GITHUB_ENV
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_ID=test_client_id" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_SECRET=test_client_secret" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test_openai_key" >> $GITHUB_ENV
        echo "OPENAI_BASE_URL=https://api.openai.com/v1" >> $GITHUB_ENV

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Seed database 
      run: |
        python -c "from app.seed_data import seed; seed()"

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Check coverage threshold
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.attrib['line-rate']) * 100
        print(f'Coverage: {coverage:.1f}%')
        if coverage < 40:
            print('❌ Coverage below 40%')
            exit(1)
        else:
            print('✅ Coverage above 40%')
        "

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run Black (code formatting)
      run: |
        black --check --diff .

    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff .

    - name: Run flake8 (linting)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    # - name: Run mypy (type checking)
    #   run: |
    #     mypy app/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit (security linting)
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --json --output safety-report.json || true

  build:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set Docker tag
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
          VERSION=latest
        else
          VERSION=sha-${GITHUB_SHA::7}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        docker build -t eq-test-backend:${{ github.sha }} .

    - name: Upload Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64, linux/arm64/v8
        tags: |
          docker.io/${{ secrets.DOCKERHUB_USERNAME }}/eq-test-backend:${{ env.VERSION }}
