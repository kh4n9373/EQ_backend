class SentimentService:
    def __init__(self):
        # Negative keywords
        self.negative_keywords = [
            "ch√°n",
            "m·ªát",
            "stress",
            "kh√≥ ch·ªãu",
            "b·ª±c",
            "t·ª©c",
            "gi·∫≠n",
            "bu·ªìn",
            "th·∫•t v·ªçng",
            "kh√¥ng th√≠ch",
            "gh√©t",
            "kh√≥ khƒÉn",
            "v·∫•n ƒë·ªÅ",
            "lo l·∫Øng",
            "s·ª£",
            "ho·∫£ng",
            "tuy·ªát v·ªçng",
            "ƒëau kh·ªï",
            "kh·ªï s·ªü",
            "m·ªát m·ªèi",
            "ki·ªát s·ª©c",
            "b·∫ø t·∫Øc",
            "vl",
        ]

        self.positive_keywords = [
            "vui",
            "h·∫°nh ph√∫c",
            "t·ªët",
            "tuy·ªát",
            "th√≠ch",
            "y√™u",
            "th√∫ v·ªã",
            "th√†nh c√¥ng",
            "may m·∫Øn",
            "t√≠ch c·ª±c",
            "l·∫°c quan",
            "hy v·ªçng",
            "ni·ªÅm vui",
            "h√†i l√≤ng",
        ]

    def analyze_sentiment(self, content: str):
        """Analyze sentiment of text content."""
        text_lower = content.lower()

        negative_count = sum(1 for word in self.negative_keywords if word in text_lower)
        positive_count = sum(1 for word in self.positive_keywords if word in text_lower)

        total_words = len(text_lower.split())
        if total_words == 0:
            sentiment_score = 0
        else:
            sentiment_score = (positive_count - negative_count) / max(total_words, 1)
            sentiment_score = max(-1, min(1, sentiment_score))  # Limit to [-1, 1]

        if sentiment_score > 0.1:
            sentiment = "positive"
            severity = "low"
        elif sentiment_score < -0.1:
            sentiment = "negative"
            severity = "high" if negative_count > 3 else "medium"
        else:
            sentiment = "neutral"
            severity = "low"

        warning = None
        suggestions = []

        if sentiment == "negative":
            if severity == "high":
                warning = "‚ö†Ô∏è Ph√°t hi·ªán d·∫•u hi·ªáu stress/ti√™u c·ª±c cao."
                suggestions = [
                    "H√≠t th·ªü s√¢u v√† th∆∞ gi√£n m·ªôt ch√∫t",
                    "Chia s·∫ª v·ªõi b·∫°n b√® ho·∫∑c ng∆∞·ªùi th√¢n",
                    "T·∫≠p trung v√†o nh·ªØng ƒëi·ªÅu t√≠ch c·ª±c",
                    "T√¨m ho·∫°t ƒë·ªông gi·∫£i tr√≠ ƒë·ªÉ th∆∞ gi√£n",
                ]
            else:
                warning = "üí° C√≥ v·∫ª b·∫°n ƒëang h∆°i ti√™u c·ª±c. M·ªçi th·ª© s·∫Ω ·ªïn th√¥i!"
                suggestions = [
                    "Th·ª≠ nh√¨n v·∫•n ƒë·ªÅ t·ª´ g√≥c ƒë·ªô kh√°c",
                    "T·∫≠p trung v√†o gi·∫£i ph√°p thay v√¨ v·∫•n ƒë·ªÅ",
                    "Chia s·∫ª ƒë·ªÉ ƒë∆∞·ª£c l·∫Øng nghe v√† h·ªó tr·ª£",
                ]
        elif sentiment == "positive":
            suggestions = [
                "Tuy·ªát v·ªùi! H√£y lan t·ªèa nƒÉng l∆∞·ª£ng t√≠ch c·ª±c n√†y",
                "Chia s·∫ª ni·ªÅm vui v·ªõi m·ªçi ng∆∞·ªùi xung quanh",
                "Ghi nh·ªõ c·∫£m gi√°c n√†y ƒë·ªÉ v∆∞·ª£t qua kh√≥ khƒÉn sau n√†y",
            ]
        else:
            suggestions = [
                "H√£y chia s·∫ª th√™m v·ªÅ c·∫£m x√∫c c·ªßa b·∫°n",
                "Th·ª≠ b√†y t·ªè r√µ r√†ng h∆°n v·ªÅ suy nghƒ© c·ªßa m√¨nh",
            ]

        return {
            "sentiment": sentiment,
            "score": sentiment_score,
            "severity": severity,
            "warning": warning,
            "suggestions": suggestions,
            "analysis": {
                "positive_words": positive_count,
                "negative_words": negative_count,
                "total_words": total_words,
            },
        }
